package LeeCode;

public class _887 {
    //887. 鸡蛋掉落
    //你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。
    //每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。
    //你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。
    //每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。
    //你的目标是确切地知道 F 的值是多少。
    //无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？

    //如果你只有一个蛋，最坏情况下也就是最少你要移动dp[1][N]=N,
    //如果只有一楼，dp[K][1]=1
    //假设第一次是在X楼扔的，如果蛋碎了，那么res=dp[K-1][X-1]+1；如果没碎，那么res=dp[K][N-X]+1
    //最坏情况，res最少为max{dp[K-1][X-1], dp[K][N-X]}+1，题解即为min{max{dp[K-1][X-1], dp[K][N-X]}}+1（1<=X<=N)
    //如何确定X的值？1.枚举 2.二分
    //设T1(X)=dp[K-1][X-1],T2(X)=dp[K][N-X];随着X的增加，T1(X)是递增的，T2(X)是递减的;题解是求随X在[1,N]中变化T1(X)和T2(X)中最大值的最小值
    //Xjii


}
